console.log("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–î–ê–ù–ù–Ø 1");

class Address {
    street: string;
    city: string;
    postalCode: string;

    constructor(street: string, city: string, postalCode: string) {
        this.street = street;
        this.city = city;
        this.postalCode = postalCode;
    }

    getFullAddress(): string {
        return `${this.street}, ${this.city}, ${this.postalCode}`;
    }
}

class Customer {
    name: string;
    age: number;
    address: Address;

    constructor(name: string, age: number, address: Address) {
        this.name = name;
        this.age = age;
        this.address = address;
    }

    displayInfo(): void {
        console.log("=== –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–õ–Ü–Ñ–ù–¢–ê ===");
        console.log(`–Ü–º'—è: ${this.name}`);
        console.log(`–í—ñ–∫: ${this.age}`);
        console.log(`–ê–¥—Ä–µ—Å–∞: ${this.address.getFullAddress()}`);
        console.log("================================");
    }
}

const customerAddress = new Address("–≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞, 10", "–ö–∏—ó–≤", "01001");
const customer = new Customer("–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ", 25, customerAddress);
customer.displayInfo();

const anotherAddress = new Address("–ø—Ä–æ—Å–ø. –ü–µ—Ä–µ–º–æ–≥–∏, 50", "–õ—å–≤—ñ–≤", "79000");
const anotherCustomer = new Customer("–ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–µ–Ω–∫–æ", 30, anotherAddress);
anotherCustomer.displayInfo();

console.log("\nüöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–î–ê–ù–ù–Ø 2");

interface Shape {
    calculateArea(): number;
}

class Rectangle implements Shape {
    width: number;
    height: number;

    constructor(width: number, height: number) {
        this.width = width;
        this.height = height;
    }

    calculateArea(): number {
        return this.width * this.height;
    }
}

class Circle implements Shape {
    radius: number;

    constructor(radius: number) {
        this.radius = radius;
    }

    calculateArea(): number {
        return Math.PI * this.radius * this.radius;
    }
}

const rectangle = new Rectangle(5, 10);
const circle = new Circle(7);

console.log(`–ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞: ${rectangle.calculateArea()}`);
console.log(`–ü–ª–æ—â–∞ –∫–æ–ª–∞: ${circle.calculateArea().toFixed(2)}`);

console.log("\nüöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–î–ê–ù–ù–Ø 3");

class Store {
    name: string;
    products: string[];

    constructor(name: string) {
        this.name = name;
        this.products = [];
    }

    addProduct(product: string): void {
        this.products.push(product);
    }

    removeProduct(product: string): void {
        this.products = this.products.filter(p => p !== product);
    }

    showProducts(): void {
        console.log(`–¢–æ–≤–∞—Ä–∏ —É –º–∞–≥–∞–∑–∏–Ω—ñ "${this.name}":`);
        if (this.products.length === 0) {
            console.log("–ú–∞–≥–∞–∑–∏–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π");
        } else {
            this.products.forEach((product, index) => {
                console.log(`${index + 1}. ${product}`);
            }); 
        }
    }
}

const store = new Store("–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç");
store.addProduct("–•–ª—ñ–±");
store.addProduct("–ú–æ–ª–æ–∫–æ");
store.addProduct("–°–∏—Ä");
store.showProducts();
store.removeProduct("–ú–æ–ª–æ–∫–æ");
store.showProducts(); 